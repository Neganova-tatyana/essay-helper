# База данных: подтемы сочинения и рекомендованные произведения
# Ключ: точное название подтемы сочинения
# Значение: список произведений (автор и название), которые подходят в качестве аргумента
ARGUMENT_BANK = {

    # Первая подтема из первого блока
    '1.1. Внутренний мир человека и его личностные качества': [
        '«Юшка» — А.П. Платонов',
        '«Карлик» — Рэй Брэдбери',
        '«Обломов» — И.А. Гончаров'
    ],

    # Вторая подтема из первого блока
    '1.2. Отношение человека к другому человеку (окружению), нравственные идеалы и выбор между добром и злом': [
        '«Карлик» — Рэй Брэдбери',
        '«Уроки французского» — В.Г. Распутин',
        '«Юшка» — А.П. Платонов'
    ],

    # Третья подтема из первого блока
    '1.3. Познание человеком самого себя': [
        '«451 градус по Фаренгейту» — Рэй Брэдбери',
        '«Обломов» — И.А. Гончаров',
        '«Записки из подполья» — Ф.М. Достоевский'
    ],

    # Четвёртая подтема из первого блока
    '1.4. Свобода человека и ее ограничения': [
        '«451 градус по Фаренгейту» — Рэй Брэдбери',
        '«1984» — Джордж Оруэлл',
        '«Мы» — Е.И. Замятин'
    ],

    # Первая подтема из второго блока
    '2.1. Семья, род; семейные ценности и традиции': [
        '«Отцы и дети» — И.С. Тургенев',
        '«Вельд» — Рэй Брэдбери',
        '«Тихий Дон» — М.А. Шолохов',
    ],

    # Вторая подтема из второго блока
    '2.2. Человек и общество': [
        '«Горе от ума» — А.С. Грибоедов',
        '«Герой нашего времени» — М.Ю. Лермонтов',
        '«Горе от ума» — А.С. Грибоедов'
    ],

    # Третья подтема из второго блока
    '2.3. Родина, государство, гражданская позиция человека': [
        '«Василий Тёркин» — А.Т. Твардовский',
        '«Судьба человека» — М.А. Шолохов',
        '«Капитанская дочка» — А.С. Пушкин'
    ],

    # Первая подтема из третьего блока
    '3.1. Природа и человек': [
        '«Олеся» — А.И. Куприн',
        '«Отцы и дети» — И.С. Тургенев',
        '«Не стреляйте белых лебедей» — Б. Васильев'
    ],

    # Вторая подтема из третьего блока
    '3.2. Наука и человек': [
        '«Собачье сердце» — М.А. Булгаков',
        '«Голова профессора Доуэля» — А.Р. Беляев',
        '«Человек-невидимка» — Герберт Уэллс',
    ],

    # Третья подтема из третьего блока
    '3.3. Искусство и человек': [
        '«Улыбка» — Рэй Брэдбери',
        '«451 градус по Фаренгейту» — Рэй Брэдбери',
        '«Портрет» — Н.В. Гоголь'
    ],

    # Четвертая подтема из третьего блока
    '3.4. Язык и языковая личность': [
        '«Русский язык» — И.С. Тургенев',
        '«Записки о русской разговорной речи» — Л.А. Новиков',
        '«Слово о словах» — Л. Успенский'
    ]
}

# Функция для обработки запросов и возврата соответствующей информации
def get_essay_prep_info(query):
    # Запрос на количество подтем
    if query == 'Сколько подтем у итогового сочинения?':
        theme_count = len(ARGUMENT_BANK)  # Считаем количество подтем в базе
        return f'Всего в базе {str(theme_count)} подтем.'

    # Запрос на список подтем
    elif query == 'Подтемы итогового сочинения в базе':
        themes_string = '\n'.join(ARGUMENT_BANK)  # Преобразуем список подтем в строку
        return 'Вот список подтем: ' + themes_string
    
    # Запрос на аргументы (произведения) для конкретной подтемы
    elif 'Аргументы для подтемы' in query:
        theme = query.replace("Аргументы для подтемы ", "").strip()

        # Используем цикл для проверки и вывода произведений
        for key, arguments in ARGUMENT_BANK.items():
            # Если подтема найдена в базе
            if key == theme:
                arguments_string = '\n- ' + '\n- '.join(arguments)
                return f'Вот произведения для подтемы "{theme}":\n{arguments_string}'
        # Если подтема не найдена
        return 'Подтема не найдена в базе.'

    # Запрос на аргументы (произведения)
    elif 'Список произведений' in query:
        all_found_arguments = set()  # Создаем пустое множество для сбора уникальных произведений

        # Перебираем ВСЕ списки произведений в нашем словаре
        for argument_list_for_theme in ARGUMENT_BANK.values():

            # Перебираем КАЖДОЕ произведение из этого списка
            for arg_line in argument_list_for_theme:

                # Этап очистки
                cleaned_arg = arg_line.strip()

                # Убираем кавычки, если они есть, для лучшего сравнения и хранения
                # Проверяем, что строка начинается с « и заканчивается »
                if cleaned_arg.startswith('«') and cleaned_arg.endswith('»'):
                    cleaned_arg = cleaned_arg[1:-1]  # Отрезаем первый и последний символ (кавычки)

                # Финальная очистка от пробелов
                cleaned_arg = cleaned_arg.strip()

                # Если после очистки строка не пустая, добавляем ее в множество
                if cleaned_arg:
                    all_found_arguments.add(cleaned_arg)  # Добавляем очищенное произведение в set

        # Сортируем уникальные произведения
        sorted_arguments = sorted(list(all_found_arguments))

        # Форматируем вывод с маркерами списка
        arguments_string = '\n- ' + '\n- '.join(sorted_arguments)
        return f'Вот полный список произведений, которые можно использовать для аргументации:\n{arguments_string}'

    # Если запрос не распознан, возвращаем сообщение о неизвестном запросе
    else:
        return '<неизвестный запрос>'


# Приветственное сообщение
print('Привет, я твой персональный помощник по подготовке к итоговому сочинению!')

# Примеры запросов
print(get_essay_prep_info('Сколько подтем у итогового сочинения?'))  # Запрос на количество подтем
print(get_essay_prep_info('Подтемы итогового сочинения в базе'))  # Запрос на список подтем
print(get_essay_prep_info('Аргументы для подтемы 3.1. Природа и человек')) # Запрос на аргументы для конкретной подтемы
print(get_essay_prep_info('Список произведений')) # Запрос на аргументы (произведения)